def runCred():
        global evidencePath

        pageCount = mainFrame.auiNotebook.GetPageCount()
        found = False
        print("Page count: ", pageCount)
        for i in range (0, pageCount): # 0 to pageCount - 1
            text = mainFrame.auiNotebook.GetPageText(i)
            print("Page ", i, ": ", text, ";")

            if text == "Credentials":
                windowCred = mainFrame.auiNotebook.GetPage(i)
                found = True
                break # from for-loop
            
            #rb is for opening non-text files
            f = open(evidencePath, 'rb')
            pcap = dpkt.pcap.Reader(f)

            identifier = 0

            for ts, buf in pcap:
                identifier = identifier + 1
                print("\n") # just a line of text separation
                print("Identifier: ", identifier)
                
                eth = dpkt.ethernet.Ethernet(buf)
                print("Ethernet type code: ", eth.type)
                
                if eth.type == dpkt.ethernet.ETH_TYPE_IP:
                    print("IP packet type detected. Extracting values...")
                    #to contain your IP address in binary
                    ip_hdr = eth.data
                    ip     = eth.ip
                    tcp    = ip.data
                    
                    # Frame number (assumed to be a sequential number which
                    # identifies a Ethernet entry within the PCAP)
                    frameNumber  = identifier
                    
                    #------------------------
                    # Server to Web Client
                    #------------------------
                    src_ip_addr_bin = ip_hdr.src
                    src_host_str = socket.inet_ntoa(src_ip_addr_bin)
                    
                    if ip_hdr.p == dpkt.ip.IP_PROTO_TCP:
                        try:                               
                            #for server ip
                            http = dpkt.http.Response(tcp.data)
                            content_length = http.headers['content-length'] if 'content-length' in http.headers else ""
                            size = str(content_length)
                            print("Content length: ", size)
                            #protocol = protocol + (http.headers['transfer-encoding'] if 'transfer-encoding' in http.headers else "")
                                
                        except Exception:
                            print("Exception in Response direction")
                            
                    else:
                        print("Protocol is not TCP")
                    
                    print("Source host: ", src_host_str)
                    
                    #------------------------
                    # Web Client to Server
                    #------------------------
                    dst_ip_addr_bin = ip_hdr.dst
                    dst_host_str = socket.inet_ntoa(dst_ip_addr_bin)
                    
                    if ip_hdr.p == dpkt.ip.IP_PROTO_TCP:
                        try:      
                            http = dpkt.http.Request(tcp.data)
                            
                            #for web dns
                            host = http.headers['host'] if 'host' in http.headers else None
                            dst_host_str = dst_host_str + " [" + str(host) + "]"

                            #for server side, name of machine    
                            user_agent = http.headers['user-agent'] if 'user-agent' in http.headers else None
                            src_host_str = src_host_str + " [" + str(user_agent) + "]"
                            
                                
                        except Exception:
                                print("Exception in Request direction")
                            
                    else: 
                        try:
                            src_host_str = src_host_str + " (Other)"

                        except Exception:
                            print("Exception in SSL web client to server direction")
                        
                    print("Desintation host: ", dst_host_str)
                    
                    #-----------------
                    # Output to GUI
                    #-----------------
                    sequence = [str(frameNumber), str(src_host_str),str(dst_host_str)]
                    pcapCredentialsTab.CredTabPanel.addCredDetails(windowCred, sequence)    
                    
                else:
                    print("Unsupported packet type. Values not extracted.")
            
            print ("\nPCAP extraction finished.\n")

            openFileDialog.Destroy() # close PCAP file
