#!/usr/bin/env python
# -*- coding: ISO-8859-1 -*-
#
# generated by wxGlade 0.8.3 on Mon Dec  3 04:48:04 2018
#

import wx
import os
import sys  # We need sys so that we can pass argv to QApplication
"""from PcapReader import PcapReader
from PacketSender import PacketSender
from packet import Packet
import packetFilter"""
from subprocess import Popen, PIPE


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class mainNetAnalysis(wx.Frame):
      def __init__(self, *args, **kwds):
            # begin wxGlade: mainNetAnalysis.__init__
            kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
            wx.Frame.__init__(self, *args, **kwds)
            self.SetSize((1000, 873))
            
            # Menu Bar
            self.mainNetAnalysis_menubar = wx.MenuBar()
            wxglade_tmp_menu = wx.Menu()
            self.mainNetAnalysis_menubar.i_uploadpcap = wxglade_tmp_menu.Append(wx.ID_ANY, "Open Pcap", "")
            self.Bind(wx.EVT_MENU, self.on_menu_upload_PCAP, id=self.mainNetAnalysis_menubar.i_uploadpcap.GetId())
            item = wxglade_tmp_menu.Append(wx.ID_ANY, "Exit", "")
            self.Bind(wx.EVT_MENU, self.on_menu_File_Exit, id=item.GetId())
            self.mainNetAnalysis_menubar.Append(wxglade_tmp_menu, "File")
            wxglade_tmp_menu = wx.Menu()
            item = wxglade_tmp_menu.Append(wx.ID_ANY, "Clear GUI", "")
            self.Bind(wx.EVT_MENU, self.on_tools_clear, id=item.GetId())
            item = wxglade_tmp_menu.Append(wx.ID_ANY, "Delete Data", "")
            self.Bind(wx.EVT_MENU, self.on_tools_del, id=item.GetId())
            self.mainNetAnalysis_menubar.Append(wxglade_tmp_menu, "Tools")
            self.SetMenuBar(self.mainNetAnalysis_menubar)
            # Menu Bar end
            self.mainNetAnalysis_statusbar = self.CreateStatusBar(1, wx.STB_DEFAULT_STYLE | wx.STB_ELLIPSIZE_MIDDLE | wx.STB_ELLIPSIZE_START)
            self.packet_details_copy = wx.Notebook(self, wx.ID_ANY)
            self.packet_details_copy_pane_2 = wx.Panel(self.packet_details_copy, wx.ID_ANY)
            self.tsharktab = wx.TextCtrl(self.packet_details_copy_pane_2, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
            self.packetsList = wx.TextCtrl(self.packet_details_copy_pane_2, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
            self.packet_details_copy_Protocol = wx.Panel(self.packet_details_copy, wx.ID_ANY)
            self.dnslist = wx.TextCtrl(self.packet_details_copy_Protocol, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)

            self.__set_properties()
            self.__do_layout()

            
            # end wxGlade

      def __set_properties(self):
            # begin wxGlade: mainNetAnalysis.__set_properties
            self.SetTitle("Network Analysis")
            self.SetBackgroundColour(wx.Colour(232, 232, 232))
            self.mainNetAnalysis_statusbar.SetStatusWidths([-1])

            # statusbar fields
            mainNetAnalysis_statusbar_fields = ["Network Analysis"]
            for i in range(len(mainNetAnalysis_statusbar_fields)):
                  self.mainNetAnalysis_statusbar.SetStatusText(mainNetAnalysis_statusbar_fields[i], i)
            self.tsharktab.SetMinSize((1000, 370))
            self.packetsList.SetMinSize((1000, 370))
            self.packetsList.SetBackgroundColour(wx.Colour(211, 211, 211))
            # end wxGlade

      def __do_layout(self):
            # begin wxGlade: mainNetAnalysis.__do_layout
            sizer_1 = wx.BoxSizer(wx.VERTICAL)
            sizer_5 = wx.BoxSizer(wx.VERTICAL)
            sizer_4 = wx.BoxSizer(wx.VERTICAL)
            sizer_4.Add(self.tsharktab, 0, wx.BOTTOM, 0)
            sizer_4.Add(self.packetsList, 0, wx.TOP, 27)
            self.packet_details_copy_pane_2.SetSizer(sizer_4)
            sizer_5.Add(self.dnslist, 1, wx.EXPAND, 0)
            self.packet_details_copy_Protocol.SetSizer(sizer_5)
            self.packet_details_copy.AddPage(self.packet_details_copy_pane_2, "Sessions")
            self.packet_details_copy.AddPage(self.packet_details_copy_Protocol, "DNS")
            sizer_1.Add(self.packet_details_copy, 1, wx.EXPAND, 0)
            self.SetSizer(sizer_1)
            self.Layout()
            self.Centre()
            # end wxGlade

      def on_menu_upload_PCAP(self, event):
            process = Popen(['sudo', 'tshark', '-r', 'test.pcap'], stdout=PIPE, stderr=PIPE)
            stdout, stderr = process.communicate()
            self.tsharktab.SetValue(stdout)

            process = Popen(['sudo', 'tcpdump', '-qns', '0', '-x', '-r', 'test.pcap'], stdout=PIPE, stderr=PIPE)
            stdout, stderr = process.communicate()
            self.packetsList.SetValue(stdout)

            process = Popen(['sudo', 'tshark', '-T', 'fields', '-e', 'ip.src', '-e', 'dns.qry.name', '-Y', '"dns.flags.response eq 0"', '-r', 'test.pcap'], stdout=PIPE, stderr=PIPE)
            stdout, stderr = process.communicate()
            self.dnslist.SetValue(stdout)


            """process = Popen(['sudo', 'tcpdump', '-qns', '0', '-X', '-r', 'test.pcap'], stdout=PIPE, stderr=PIPE)
            stdout, stderr = process.communicate()
            self.packetsList.SetValue(stdout)"""

      """def on_menu_upload_PCAP(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            os.system('tcpdump -qns 0 -X -r test.pcap')"""


      def add_packet(self, packetToAdd):
            packetToAdd.id = self.packetsCounter
            self.currentPackets.Append(packetToAdd)
            self.packetsCounter += 1

            if packetFilter.filterPacket(self.filtersInput.text(), packetToAdd) and len(packetToAdd.layers) == 3:
                  item = self.packetsList
                  item.InsertStringItem(row[0], str(packetToAdd.created))
                  item.SetStringItem(row[1], str(packetToAdd.id))
                  item.SetStringItem(row[2], str(packetToAdd.layers[1]['Source Address']))
                  item.SetStringItem(row[3], str(packetToAdd.layers[1]['Destination Address']))
                  item.SetStringItem(row[4], str(packetToAdd.layers[2]['LayerType']))

      def refresh_list(self):
            self.packetsList.clear()
            for packet in self.currentPackets:
                  if packetFilter.filterPacket(self.filtersInput.text(), packet) and len(packet.layers) == 3:
                        item = self.packetsList
                        item.Append(0, str(packet.created))
                        item.Append(1, str(packet.id))
                        item.Append(2, str(packet.layers[1]['Source Address']))
                        item.Append(3, str(packet.layers[1]['Destination Address']))
                        item.Append(4, str(packet.layers[2]['LayerType']))

      def on_menu_File_Exit(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            self.Destroy()

      def on_tools_clear(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            print("Event handler 'on_tools_clear' not implemented!")
            event.Skip()

      def on_tools_del(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            print("Event handler 'on_tools_del' not implemented!")
            event.Skip()


      def itemSelectionChanged(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            print("Event handler 'itemSelectionChanged' not implemented!")
            event.Skip()

      def packet_selected(self):

            """# on clear
            self.tab_ethernet_list.clear()
            self.tab_ip_list.clear()
            self.tab_protocol_list.clear()

            # on recovery to selection
            selected = self.packetsList.selectedItems()
            selected = selected[0]

            # we search the complete package in currentPackets (the QTreeWidget does not have all the info)
            fullPacket = next((packet for packet in self.currentPackets if packet.id == int(selected.text(1))), None)

            # first tab (hexdump)
            hexdumpString = hexdump.hexdump(fullPacket.packet, 'return')
            self.tab_packet_hexdump.Append(hexdumpString)

            # second tab (ethernet)
            for key,value in fullPacket.layers[0].items() :
                  item = self.sessions_notebook_Ethernet
                  item.Append(0, str(key))
                  item.Append(1, str(value))

            # third tab (ip)
            for key,value in fullPacket.layers[1].items() :
                  item = self.sessions_notebook_IP
                  item.Append(0, str(key))
                  item.Append(1, str(value))

            # fourth tab (protocol)
            self.packetDetail.setTabText(3, fullPacket.layers[2]['LayerType'])
            for key,value in fullPacket.layers[2].items() :
                  item = self.sessions_notebook_Protocol
                  item.Append(0, str(key))
                  item.Append(1, str(value))"""






# end of class mainNetAnalysis

class MyApp(wx.App):
      def OnInit(self):
            self.mainNetAnalysis = mainNetAnalysis(None, wx.ID_ANY, "")
            self.SetTopWindow(self.mainNetAnalysis)
            self.mainNetAnalysis.Show()
            return True

# end of class MyApp

if __name__ == "__main__":
      app = MyApp(0)
      app.MainLoop()
