#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.3 on Fri Aug 31 03:44:54 2018
#

import wx
import wx.aui
import os
import random
import SummaryTab, NewCaseDialog, AnalyzedDataTab, DeletedFilesTab, mainmenu, search, searchTab
import connectdb
import subprocess
import sqlite3
from sqlite3 import Error
from pathlib import Path
import datetime, time
import re
from threading import Thread

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

openTabs = [0]

analyzedDataTree = ["Deleted files",
                    "Images", 
                    "Video",
                    "Audio",
                    "Emails", 
                    "Database",
                    "Archives",
                    "Website Bookmarks"]

documentsTree = ["HTML",
                "Office",
                "PDF",
                "Plain Text",
                "Rich Text"]

executablesTree = [".exe",
                    ".dll",
                    ".bat",
                    ".cmd",
                    ".com",
                    ".rbf"]

class mainFrame(wx.Frame):
    def __init__(self, parent):
        # begin wxGlade: mainFrame.__init__
        wx.Frame.__init__(self, parent=parent)
        self.SetSize((1280, 720))
        
        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "New case", "")
        self.Bind(wx.EVT_MENU, self.onNewCase, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Open case", "")
        self.Bind(wx.EVT_MENU, self.onOpenCase, id=item.GetId())
        wxglade_tmp_menu.AppendSeparator()
        itemAddEvidenceBtn = wxglade_tmp_menu.Append(wx.ID_ANY, "Add evidence", "")                                      
        self.Bind(wx.EVT_MENU, self.onAddEvidence, id=itemAddEvidenceBtn.GetId())     
        wxglade_tmp_menu.AppendSeparator()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Quit", "")
        self.Bind(wx.EVT_MENU, self.onQuit, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Image files", "")
        self.Bind(wx.EVT_MENU, self.onSelImageFiles, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Mobile image files", "")
        self.Bind(wx.EVT_MENU, self.onSelMobileImageFiles, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Network pcap files", "")
        self.Bind(wx.EVT_MENU, self.onSelNetworkPcapFiles, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "Extract")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end

        #splitter window
        self.window_1 = wx.SplitterWindow(self, wx.ID_ANY)

        #left panel
        self.windowLeftPanel = wx.Panel(self.window_1, wx.ID_ANY)
        self.tree_ctrl_1 = wx.TreeCtrl(self.windowLeftPanel, wx.ID_ANY, style=wx.TR_HAS_BUTTONS | wx.TR_MULTIPLE)
        
        #right panel
        self.windowRightPanel = wx.Panel(self.window_1, wx.ID_ANY)
        self.searchBtn = wx.Button(self.windowRightPanel, id=wx.ID_ANY, label="Search", pos=wx.DefaultPosition, size=(100,-1), style=0, validator=wx.DefaultValidator)
       
        self.auiNotebook = wx.aui.AuiNotebook(self.windowRightPanel)
        self.paneltest = wx.Panel(self.auiNotebook, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL)
        
    
        #bind events
        self.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.onItemSel, self.tree_ctrl_1)
        self.Bind(wx.EVT_BUTTON, self.onSearchBtn, self.searchBtn)
        self.Bind(wx.aui.EVT_AUINOTEBOOK_PAGE_CLOSE, self.onAuiClose, self.auiNotebook)

        #properties
        self.SetTitle("Forensic Pi")
        self.tree_ctrl_1.SetBackgroundColour(wx.Colour(240, 240, 240))
        self.windowLeftPanel.SetMinSize((180, -1))
        self.windowRightPanel.SetMinSize((980, -1))
        self.window_1.SetMinimumPaneSize(20)

        #layout
        mainSizer = wx.BoxSizer(wx.VERTICAL)
        
        #left panel sizer
        panel1Sizer = wx.BoxSizer(wx.HORIZONTAL)
        panel1Sizer.Add(self.tree_ctrl_1, 1, wx.EXPAND, 0)
        self.windowLeftPanel.SetSizer(panel1Sizer)
        
        #right panel sizer
        self.panel2Sizer = wx.BoxSizer(wx.VERTICAL)
        self.panel2Sizer.Add(self.searchBtn, 0, wx.ALIGN_RIGHT , 0)
        self.panel2Sizer.Add(self.auiNotebook, 1, wx.EXPAND, 0)
        self.windowRightPanel.SetSizer(self.panel2Sizer)
        
        #splitter
        self.window_1.SplitVertically(self.windowLeftPanel, self.windowRightPanel)
        mainSizer.Add(self.window_1, 1, wx.EXPAND, 0)
       
        self.SetSizer(mainSizer)
        self.Layout()

    def recreateTree(self, caseDbFile):
        self.tree_ctrl_1.Freeze()
        self.tree_ctrl_1.DeleteAllItems()
        global caseName
        for x in caseDetails:
            caseName = str(x[2]) + "_" + x[3]

        #adds the name of case as root item in treectrl    
        root = self.tree_ctrl_1.AddRoot(caseName)                                   
        summary = self.tree_ctrl_1.AppendItem(root, "Summary")
        
        #connect to case database
        conn = connectdb.create_connection(caseDbFile)                              
        #get evidenceName, EvidenceDbPath EvidenceDatetime and Md5 from case database
        #EvidenceDbPath = path to tsk database generated when onAddEvidence is called
        evidenceInfo = connectdb.select_evidence_details(conn)                      
                                                                                    
        for x in evidenceInfo:                    
            #connect to tsk database
            evidenceDbConn = connectdb.create_connection(x[2])                      
            #get evidence name, size and md5 from tsk database
            evidenceDbInfo = connectdb.select_image_info(evidenceDbConn)            
            #get partition info from tsk database
            evidencePart  = connectdb.select_image_partitions(evidenceDbConn)       
            count = 0
            for i in evidenceDbInfo:
                fileName = os.path.basename(i[0])
                #append evidence name to treectrl
                temp = self.tree_ctrl_1.AppendItem(summary, fileName)               
                for i in evidencePart:                                              
                    i = list(i)
                    count += 1 
                    #append evidence partition to evidence name
                    self.tree_ctrl_1.AppendItem(temp, "Vol{count} {desc}: {start}-{end})".format(count=count, desc=str(i[2]), start=str(i[0]), end=str(i[1])))  

        self.tree_ctrl_1.AppendItem(summary, "Timeline")
        self.tree_ctrl_1.AppendItem(summary, "Bookmarks")
        self.tree_ctrl_1.AppendItem(summary, "Search")

        analyzedData = self.tree_ctrl_1.AppendItem(root, "Analyzed Data")
        for x in analyzedDataTree:                                                   
            self.tree_ctrl_1.AppendItem(analyzedData, x)
        docTree = self.tree_ctrl_1.AppendItem(analyzedData, "Documents")
        for x in documentsTree:
            self.tree_ctrl_1.AppendItem(docTree, x)
        exeTree = self.tree_ctrl_1.AppendItem(analyzedData, "Executables")
        for x in executablesTree:
            self.tree_ctrl_1.AppendItem(exeTree, x)

        self.tree_ctrl_1.ExpandAll()
        self.tree_ctrl_1.Thaw()

    #--------------------#
    #   Menu Functions   #
    #--------------------#
    def onNewCase(self, event):  
        dialog = NewCaseDialog.newCase(None)
        dialog.Center()
        dialog.ShowModal()
        dbPath = dialog.getCaseDb()
        
        global caseDetails
        try:
            #connects to new case database
            conn = connectdb.create_connection(dbPath)                      
            #get InvestigatorName, CaseNum, CaseName, CaseFolder, CaseDb, CaseDesc, Datatime from case database
            caseDetails = connectdb.select_case_details(conn)               
            #creates treectrl
            self.recreateTree(dbPath)                                       
        except:
            pass 
        dialog.Destroy()
        
    def onOpenCase(self, event):  
        #creates a filedialog that only allow user to select .db files
        openFileDialog = wx.FileDialog(self, "Open", "", "","*.db",         
                                       wx.FD_OPEN | wx.FD_FILE_MUST_EXIST) 
 
        openFileDialog.ShowModal()                      
        global caseDbPath
        #get path selected in filedialog
        caseDbPath  = openFileDialog.GetPath()                              
        
        global caseDetails, evidenceDetails
        try:
            #try to connect to case database and get case and evidence details
            conn = connectdb.create_connection(caseDbPath)                  
            caseDetails = connectdb.select_case_details(conn)
            #get EvidenceName, EvidenceDbPath, EvidenceDatatime and Md5 from case database
            evidenceDetails = connectdb.select_evidence_details(conn)       
            #opens summary page 
            self.addAuiTab("Summary", evidenceDetails)                      
            openTabs.append("Summary")                          
            self.recreateTree(caseDbPath)
        except:
            #ignore if try: fails
            pass                                                            
        openFileDialog.Destroy()
        
    def onAddEvidence(self, event):
        try:
            caseDetails                                                     
        #if caseDetails not defined    
        except NameError:                                                   
            print("Case not opened")                                        
        #if caseDetails is defined
        else:                                                               
            #creates a filedialog that only allow user to select .dd files 
            openFileDialog = wx.FileDialog(self, "Open", "", "","*.dd",     
                                        wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)
    
            openFileDialog.ShowModal()                         
            global caseDir, caseDbPath                                   
            #get path of selected dd file
            evidencePath = openFileDialog.GetPath()                         
            fileName = os.path.basename(evidencePath)
            
            for x in caseDetails:
                #get case directory from caseDetails
                caseDir = x[4]                                              
                #get case database path from caseDetails
                caseDbPath = x[5]                                           

            evidenceDbDir = Path(caseDir+"/Evidence_Database")
            #check if directory exist
            if evidenceDbDir.is_dir() == False:                             
                #create directory if it does not exist
                os.mkdir(str(evidenceDbDir))                                
            if fileName != "":
                self._dialog = wx.ProgressDialog("Adding evidence", "Creating database for '{s}'".format(s=fileName), 100)
                #starts the loading dialog
                LoadingDialog(self._dialog)                                 
                #use tsk_loaddb to generate tsk database
                load_db = subprocess.call(["tsk_loaddb", "-d",  "{caseDir}/Evidence_Database/{fileName}.db".format(caseDir=caseDir, fileName=fileName), evidencePath]) 
                #ends the loading dialog
                LoadingDialog.endLoadingDialog(self)                        

                #if no error
                if load_db == 0:                                            
                    conn = connectdb.create_connection(caseDbPath)
                    with conn:
                        evidenceDbPath = str(evidenceDbDir)+"/"+fileName+".db"
                        #hash = "md5sum {evidencePath} | awk '{col}".format(evidencePath=evidenceDbPath, col="{print $1}")
                        #evidenceMd5 = subprocess.Popen([hash], stdout=subprocess.PIPE).communicate()[0]
                        evidenceMd5 = "None"
                        insertEvidence = (1, fileName, evidenceDbPath, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), evidenceMd5)
                        #insert to EvidenceInfo in case database
                        connectdb.insertEvidenceDetails(conn, insertEvidence)   
                    
                    #connect to tsk database
                    evidenceConn = connectdb.create_connection(caseDir+"/Evidence_Database/"+fileName+".db")    
                    #get image partitions from tsk database
                    evidencePart = connectdb.select_image_partitions(evidenceConn)                              
                    
                    #check if Deleted_Files.db exist
                    if Path(caseDir+"/Evidence_Database/Deleted_Files.db").is_file() == False:                  
                        createDeletedFilesDb = connectdb.create_connection(caseDir+"/Evidence_Database/Deleted_Files.db") 
                        deteledFilesTable = "CREATE TABLE 'DeletedFiles' ('fileType' TEXT, 'status' TEXT, 'inode' TEXT, 'filePath' TEXT, 'ctime' TEXT, 'crtime' TEXT, 'atime' TEXT, 'mtime' TEXT, 'size' INTEGER, 'uid' INTEGER, 'gid' INTEGER, 'image' TEXT);"
                        #creates if it does not exist
                        connectdb.createTable(createDeletedFilesDb, deteledFilesTable)                          
                    
                    else:
                        #connects to Deleted_Files.db
                        createDeletedFilesDb = connectdb.create_connection(caseDir+"/Evidence_Database/Deleted_Files.db")   
                        
                    for x in evidencePart:
                        if x[2] != "Unallocated":
                            #recover files from all partitions that re not unallocated
                            subprocess.Popen(["tsk_recover", "-e", "-o", str(x[0]), evidencePath, caseDir+"/Extracted/"+fileName]) 
                            
                            listAllDeletedFiles = "fls -rFdl -o {offset} {image}".format(offset=str(x[0]), image=evidencePath)
                            #list all deleted files
                            process = subprocess.Popen(listAllDeletedFiles, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE) 

                            stdout,stderr = process.communicate()
                            output = stdout.decode()
                            #change all ' ' in the second and third column of fls output to to '\t'
                            chk = re.sub(r'[ ]\*[ ]', '\t*\t', output)          
                            #change all '\n' to '\t'
                            chk = re.sub(r'\n', '\t', chk)                      
                            #splits all values between \t into a list 
                            chk = chk.split('\t')                               
                            itemList = []
                            k=0
                            for i in range(k,len(chk)-1,11):
                                k=i
                                #appends every 11 items into a list
                                itemList.append(chk[k:k+11])                    

                            with createDeletedFilesDb:
                                for list in itemList:
                                    insertDeletedFiles = (list[0], list[1], list[2], list[3], list[4], list[5], list[6], list[7], list[8], list[9], list[10], fileName)
                                    #inserts all deleted files info into Deleted_Files.db
                                    connectdb.insertDeletedFiles(createDeletedFilesDb, insertDeletedFiles)  
                    wx.MessageBox("Extracting '{file}' in the background.".format(file=fileName))

                    global evidenceDetails
                    evidenceDetails = connectdb.select_evidence_details(conn)

                    self.auiNotebook.DeletePage(0)
                    self.auiNotebook.RemovePage(0)
                    self.addAuiTab("Summary", evidenceDetails)                  
                    self.recreateTree(caseDbPath)

            openFileDialog.Destroy()

    def onQuit(self, event):  
        self.Close()
        self.Destroy()

    def onSelImageFiles(self, event):  
        event.Skip()

    def onSelMobileImageFiles(self, event):  
        print("Event handler 'onSelMobileImageFiles' not implemented!")
        event.Skip()

    def onSelNetworkPcapFiles(self, event):  
        print("Event handler 'onSelNetworkPcapFiles' not implemented!")
        event.Skip()
    #end of menu functions

    #-----------------------#
    #   AUI Tab Functions   #
    #-----------------------#
    #check if tab is opened in aui
    def checkOpenedTab(self, tabName):                     
        openedTab = set(openTabs)
        if tabName not in openedTab:
            openTabs.append(tabName)
            return True
        else:
            return False

    def addAuiTab(self, tabName, evidenceDetails):
        global caseDir
        for x in caseDetails:
            caseDir = x[4]

        if tabName == "Summary":
            self.auiNotebook.AddPage(SummaryTab.TabPanel(self.auiNotebook, caseDetails, evidenceDetails), tabName, False, wx.NullBitmap)
        
        if tabName == "Deleted files":
            #create loading dialog
            self._dialog = wx.ProgressDialog("Loading", "Loading {tabName}".format(tabName=tabName), 100)  
            #start loading 
            LoadingDialog(self._dialog)                                                                    
            #calls and open a aui tab from DeletedFilesTab.py
            self.auiNotebook.AddPage(DeletedFilesTab.TabPanel(self.auiNotebook, tabName, caseDir), tabName, False, wx.NullBitmap) 
            #stop loading
            LoadingDialog.endLoadingDialog(self)                                                           

        if tabName == "Bookmarks":
            self._dialog = wx.ProgressDialog("Loading", "Loading {tabName}".format(tabName=tabName), 100)
            LoadingDialog(self._dialog)
            #calls and open a aui tab from AnalyzedDataTab.py
            self.auiNotebook.AddPage(AnalyzedDataTab.TabPanel(self.auiNotebook, tabName, evidenceDetails, caseDir, caseDbPath), tabName, False, wx.NullBitmap)  
            LoadingDialog.endLoadingDialog(self)

        for x in analyzedDataTree:
            if tabName == x and tabName != "Deleted files":
                self._dialog = wx.ProgressDialog("Loading", "Loading {tabName}".format(tabName=tabName), 100)
                LoadingDialog(self._dialog)
                addingPage = self.auiNotebook.AddPage(AnalyzedDataTab.TabPanel(self.auiNotebook, tabName, evidenceDetails, caseDir, caseDbPath), tabName, False, wx.NullBitmap)
                LoadingDialog.endLoadingDialog(self)
                       
        for x in documentsTree:                                                                                                            
            if tabName == x:
                self._dialog = wx.ProgressDialog("Loading", "Loading {tabName}".format(tabName=tabName), 100)
                LoadingDialog(self._dialog)                                                                        
                self.auiNotebook.AddPage(AnalyzedDataTab.TabPanel(self.auiNotebook, tabName, evidenceDetails, caseDir, caseDbPath), tabName, False, wx.NullBitmap)
                LoadingDialog.endLoadingDialog(self)

        for x in executablesTree:
            if tabName == x:
                self._dialog = wx.ProgressDialog("Loading", "Loading {tabName}".format(tabName=tabName), 100)
                LoadingDialog(self._dialog)
                self.auiNotebook.AddPage(AnalyzedDataTab.TabPanel(self.auiNotebook, tabName, evidenceDetails, caseDir, caseDbPath), tabName, False, wx.NullBitmap)
                LoadingDialog.endLoadingDialog(self)

        for x in evidenceDetails:                     
            #connects to tsk database
            evidenceDbConn = connectdb.create_connection(x[2])                      
            #get name, size and md5 from tsk database
            evidenceDbInfo = connectdb.select_image_info(evidenceDbConn)            
            #get partition info from tsk database
            evidencePart  = connectdb.select_image_partitions(evidenceDbConn)       
            count = 0
            for i in evidencePart:
                count += 1
                if tabName == "Vol{count} {desc}: {start}-{end})".format(count=count, desc=str(i[2]), start=str(i[0]), end=str(i[1])):
                    self._dialog = wx.ProgressDialog("Loading", "Loading {tabName}".format(tabName=tabName), 100)
                    LoadingDialog(self._dialog)
                    self.auiNotebook.AddPage(AnalyzedDataTab.TabPanel(self.auiNotebook, tabName, evidenceDetails, caseDir, caseDbPath), tabName, False, wx.NullBitmap)
                    LoadingDialog.endLoadingDialog(self)
                
    def onItemSel(self, event):  
        #gets selected item from treectrl
        temp = event.GetItem()          
        tabName = self.tree_ctrl_1.GetItemText(temp)    
        print("{name} selected".format(name=tabName))
        
        try:
            #checks if caseDetails is defined
            caseDetails                 
        #if not defined
        except:                         
            print("Case not opened")
        #if defined
        else:                          
            try:                    
                evidenceDetails
            except:
                print("No evidence found")
            else:
                #check if selected item is open
                if self.checkOpenedTab(tabName) == True:        
                    #open aui tab
                    self.addAuiTab(tabName, evidenceDetails)    
                else: 
                    print('Tab already open')


    def onAuiClose(self, event):
        temp = event.GetSelection()
        tabName = self.auiNotebook.GetPageText(temp)
        #self.auiNotebook.RemovePage(temp)          #mac
        print("Closing " + tabName)
        #remove closed tab from openTabs
        openTabs.remove(tabName)                    
    
    def onSearchBtn(self, event):
        try:
            caseDetails
        except:
            print("Case not open")
        else:
            #calls searchDialog() from search.py
            dlg = search.searchDialog(None)         
            dlg.Center()
            dlg.ShowModal()
            #calls searchItem() to get search and search option
            searchItem = dlg.searchItems()          

            searchReturn = []
            if searchItem[1] == "Normal Search":
                for x in evidenceDetails:
                    #connect to tsk database
                    conn = connectdb.create_connection(x[2])                            
                    #search in tsk database
                    searchResults = connectdb.search_file_name(conn, searchItem[0])     
                    if searchResults != []:
                        for i in searchResults:
                            #adds image location to end of result
                            i = i + (x[1],)                                             
                            #append each result
                            searchReturn.append(i)                                      

                self._dialog = wx.ProgressDialog("Search", "Searching for {val}".format(val=searchItem[0]), 100)
                LoadingDialog(self._dialog)
                #call and add searchTab aui page
                self.auiNotebook.AddPage(searchTab.searchTabPanel(self.auiNotebook, searchReturn, caseDir), "Search ("+searchItem[0]+")", False, wx.NullBitmap) 
                LoadingDialog.endLoadingDialog(self)
            else:
                print("Regular Expression")

            dlg.Destroy()
        
class LoadingDialog():
    def __init__(self, _dialog):
        self._dialog = _dialog
        self._dialog.Center()
        self._dialog.Pulse()
        self.run()
     
    def run(self):
        count = 0
        while True:
            self._dialog.Update(count)
            if count == 100:
                break
            count += 2
        
    def endLoadingDialog(self):
        self._dialog.Destroy()

class MyApp(wx.App):
    def OnInit(self):
        self.ForensicPi = mainFrame(None)
        self.SetTopWindow(self.ForensicPi)
        self.ForensicPi.Show()
        self.ForensicPi.Center()
        
        return True
   
# end of class MyApp

if __name__ == "__main__":
    forensicPi = MyApp(0)
    forensicPi.MainLoop()
