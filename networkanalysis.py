#!/usr/bin/env python
# -*- coding: CP1252 -*-
#
# generated by wxGlade 0.8.3 on Mon Dec 10 07:19:31 2018
#

import wx
import NewCaseDialog
import connectdb
import sqlite3
from sqlite3 import Error
from pathlib import Path
import datetime, time


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class mainNetAnalysis(wx.Frame):
      def __init__(self, *args, **kwds):
            # begin wxGlade: mainNetAnalysis.__init__
            kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
            wx.Frame.__init__(self, *args, **kwds)
            self.SetSize((877, 758))
            
            # Menu Bar
            self.mainNetAnalysis_menubar = wx.MenuBar()
            wxglade_tmp_menu = wx.Menu()
            item = wxglade_tmp_menu.Append(wx.ID_ANY, "New Case", "")
            self.Bind(wx.EVT_MENU, self.on_menu_New_Case, id=item.GetId())
            item = wxglade_tmp_menu.Append(wx.ID_ANY, "Open Case", "")
            self.Bind(wx.EVT_MENU, self.on_menu_Open_Case, id=item.GetId())
            item = wxglade_tmp_menu.Append(wx.ID_ANY, "Add PCAP File", "")
            self.Bind(wx.EVT_MENU, self.on_menu_Add_PCAP, id=item.GetId())
            item = wxglade_tmp_menu.Append(wx.ID_ANY, "Exit", "")
            self.Bind(wx.EVT_MENU, self.on_menu_File_Exit, id=item.GetId())
            self.mainNetAnalysis_menubar.Append(wxglade_tmp_menu, "File")
            wxglade_tmp_menu = wx.Menu()
            item = wxglade_tmp_menu.Append(wx.ID_ANY, "Clear GUI", "")
            self.Bind(wx.EVT_MENU, self.on_tools_clear, id=item.GetId())
            item = wxglade_tmp_menu.Append(wx.ID_ANY, "Delete Data", "")
            self.Bind(wx.EVT_MENU, self.on_tools_del, id=item.GetId())
            self.mainNetAnalysis_menubar.Append(wxglade_tmp_menu, "Tools")
            self.SetMenuBar(self.mainNetAnalysis_menubar)
            # Menu Bar end
            self.mainNetAnalysis_statusbar = self.CreateStatusBar(1, wx.STB_DEFAULT_STYLE | wx.STB_ELLIPSIZE_MIDDLE | wx.STB_ELLIPSIZE_START)
            
            # Tool Bar
            self.mainNetAnalysis_toolbar = wx.ToolBar(self, -1)
            self.SetToolBar(self.mainNetAnalysis_toolbar)
            # Tool Bar end
            self.packet_details_copy = wx.Notebook(self, wx.ID_ANY)
            self.notebook_1_pane_2 = wx.Panel(self.packet_details_copy, wx.ID_ANY)
            self.list_ctrl_1 = wx.ListCtrl(self.notebook_1_pane_2, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
            self.packet_details_copy_ = wx.Panel(self.packet_details_copy, wx.ID_ANY)
            self.notebook_1 = wx.Notebook(self.packet_details_copy_, wx.ID_ANY)
            self.notebook_1_se = wx.Panel(self.notebook_1, wx.ID_ANY)
            self.notebook_1_ccfg = wx.Panel(self.notebook_1, wx.ID_ANY)
            self.notebook_1_pane_1 = wx.Panel(self.notebook_1, wx.ID_ANY)
            self.list_ctrl_6 = wx.ListCtrl(self.packet_details_copy_, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
            self.packet_details_copy_pane_2 = wx.Panel(self.packet_details_copy, wx.ID_ANY)
            self.tsharktab = wx.TextCtrl(self.packet_details_copy_pane_2, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
            self.packetsList = wx.TextCtrl(self.packet_details_copy_pane_2, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
            self.packet_details_copy_Protocol = wx.Panel(self.packet_details_copy, wx.ID_ANY)
            self.dnslist = wx.TextCtrl(self.packet_details_copy_Protocol, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
            self.packet_details_copy_Credentials = wx.Panel(self.packet_details_copy, wx.ID_ANY)
            self.list_ctrl_4 = wx.ListCtrl(self.packet_details_copy_Credentials, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
            self.packet_details_copy_Keywords = wx.Panel(self.packet_details_copy, wx.ID_ANY)
            self.list_ctrl_5 = wx.ListCtrl(self.packet_details_copy_Keywords, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
            self.panel_1 = wx.Panel(self.packet_details_copy_Keywords, wx.ID_ANY)

            self.__set_properties()
            self.__do_layout()

            self.Bind(wx.EVT_NAVIGATION_KEY, self.packet_file_notebook)
            self.Bind(wx.EVT_NAVIGATION_KEY, self.packet_images_notebook)
            self.Bind(wx.EVT_NAVIGATION_KEY, self.packet_sessions_notebook)
            self.Bind(wx.EVT_NAVIGATION_KEY, self.packet_dns_notebook)
            self.Bind(wx.EVT_NAVIGATION_KEY, self.packet_credentials_notebook)
            self.Bind(wx.EVT_NAVIGATION_KEY, self.packet_keywords_notebook)
            # end wxGlade

      def __set_properties(self):
            # begin wxGlade: mainNetAnalysis.__set_properties
            self.SetTitle("Network Analysis")
            self.SetBackgroundColour(wx.Colour(232, 232, 232))
            self.mainNetAnalysis_statusbar.SetStatusWidths([-1])

            # statusbar fields
            mainNetAnalysis_statusbar_fields = ["Network Analysis"]
            for i in range(len(mainNetAnalysis_statusbar_fields)):
                  self.mainNetAnalysis_statusbar.SetStatusText(mainNetAnalysis_statusbar_fields[i], i)
            self.mainNetAnalysis_toolbar.Realize()
            self.list_ctrl_1.AppendColumn("Frame No.", format=wx.LIST_FORMAT_LEFT, width=100)
            self.list_ctrl_1.AppendColumn("File Path", format=wx.LIST_FORMAT_LEFT, width=150)
            self.list_ctrl_1.AppendColumn("Source Host", format=wx.LIST_FORMAT_LEFT, width=150)
            self.list_ctrl_1.AppendColumn("S.port", format=wx.LIST_FORMAT_LEFT, width=100)
            self.list_ctrl_1.AppendColumn("Destination Host", format=wx.LIST_FORMAT_LEFT, width=150)
            self.list_ctrl_1.AppendColumn("D.port", format=wx.LIST_FORMAT_LEFT, width=100)
            self.list_ctrl_1.AppendColumn("Filename", format=wx.LIST_FORMAT_LEFT, width=150)
            self.list_ctrl_1.AppendColumn("Extension", format=wx.LIST_FORMAT_LEFT, width=100)
            self.list_ctrl_1.AppendColumn("Size", format=wx.LIST_FORMAT_LEFT, width=100)
            self.list_ctrl_1.AppendColumn("Timestamp", format=wx.LIST_FORMAT_LEFT, width=150)
            self.list_ctrl_6.AppendColumn("FIlename", format=wx.LIST_FORMAT_LEFT, width=250)
            self.list_ctrl_6.AppendColumn("MD5", format=wx.LIST_FORMAT_LEFT, width=100)
            self.list_ctrl_6.AppendColumn("Size ", format=wx.LIST_FORMAT_LEFT, width=100)
            self.list_ctrl_6.AppendColumn("Parent Path", format=wx.LIST_FORMAT_LEFT, width=200)
            self.list_ctrl_6.AppendColumn("Extension", format=wx.LIST_FORMAT_LEFT, width=100)
            self.tsharktab.SetMinSize((877, 320))
            self.packetsList.SetMinSize((877, 365))
            self.packetsList.SetBackgroundColour(wx.Colour(211, 211, 211))
            self.list_ctrl_4.AppendColumn("Client", format=wx.LIST_FORMAT_LEFT, width=150)
            self.list_ctrl_4.AppendColumn("Server", format=wx.LIST_FORMAT_LEFT, width=150)
            self.list_ctrl_4.AppendColumn("Protocol", format=wx.LIST_FORMAT_LEFT, width=100)
            self.list_ctrl_4.AppendColumn("Username", format=wx.LIST_FORMAT_LEFT, width=100)
            self.list_ctrl_4.AppendColumn("Password", format=wx.LIST_FORMAT_LEFT, width=100)
            self.list_ctrl_4.AppendColumn("Valid Login", format=wx.LIST_FORMAT_LEFT, width=100)
            self.list_ctrl_4.AppendColumn("Online Timestamp", format=wx.LIST_FORMAT_LEFT, width=165)
            self.list_ctrl_5.AppendColumn("A", format=wx.LIST_FORMAT_LEFT, width=-1)
            self.list_ctrl_5.AppendColumn("B", format=wx.LIST_FORMAT_LEFT, width=-1)
            self.list_ctrl_5.AppendColumn("C", format=wx.LIST_FORMAT_LEFT, width=-1)
            # end wxGlade

      def __do_layout(self):
            # begin wxGlade: mainNetAnalysis.__do_layout
            sizer_1 = wx.BoxSizer(wx.VERTICAL)
            sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
            sizer_8 = wx.BoxSizer(wx.VERTICAL)
            sizer_6 = wx.BoxSizer(wx.VERTICAL)
            sizer_5 = wx.BoxSizer(wx.VERTICAL)
            sizer_4 = wx.BoxSizer(wx.VERTICAL)
            sizer_3 = wx.BoxSizer(wx.VERTICAL)
            sizer_2 = wx.BoxSizer(wx.VERTICAL)
            sizer_2.Add(self.list_ctrl_1, 1, wx.EXPAND, 0)
            self.notebook_1_pane_2.SetSizer(sizer_2)
            self.notebook_1.AddPage(self.notebook_1_se, "Hex")
            self.notebook_1.AddPage(self.notebook_1_ccfg, "Image")
            self.notebook_1.AddPage(self.notebook_1_pane_1, "FIle Metadata")
            sizer_3.Add(self.notebook_1, 1, wx.EXPAND, 0)
            sizer_3.Add(self.list_ctrl_6, 1, wx.ALL | wx.EXPAND, 5)
            self.packet_details_copy_.SetSizer(sizer_3)
            sizer_4.Add(self.tsharktab, 0, 0, 0)
            sizer_4.Add(self.packetsList, 0, wx.TOP, 27)
            self.packet_details_copy_pane_2.SetSizer(sizer_4)
            sizer_5.Add(self.dnslist, 1, wx.EXPAND, 0)
            self.packet_details_copy_Protocol.SetSizer(sizer_5)
            sizer_6.Add(self.list_ctrl_4, 1, wx.EXPAND, 0)
            self.packet_details_copy_Credentials.SetSizer(sizer_6)
            sizer_8.Add((0, 0), 0, 0, 0)
            sizer_8.Add((0, 0), 0, 0, 0)
            sizer_8.Add((0, 0), 0, 0, 0)
            sizer_7.Add(sizer_8, 1, wx.EXPAND, 0)
            sizer_7.Add(self.list_ctrl_5, 1, wx.EXPAND, 0)
            sizer_7.Add(self.panel_1, 1, wx.EXPAND, 0)
            self.packet_details_copy_Keywords.SetSizer(sizer_7)
            self.packet_details_copy.AddPage(self.notebook_1_pane_2, "File")
            self.packet_details_copy.AddPage(self.packet_details_copy_, "Images")
            self.packet_details_copy.AddPage(self.packet_details_copy_pane_2, "Sessions")
            self.packet_details_copy.AddPage(self.packet_details_copy_Protocol, "DNS")
            self.packet_details_copy.AddPage(self.packet_details_copy_Credentials, "Credentials")
            self.packet_details_copy.AddPage(self.packet_details_copy_Keywords, "Keywords")
            sizer_1.Add(self.packet_details_copy, 1, wx.EXPAND, 0)
            self.SetSizer(sizer_1)
            self.Layout()
            self.Centre()
            # end wxGlade

      def on_menu_New_Case(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            #creates a new diaglog
            dialog = NewCaseDialog.newCase(None)
            dialog.Center()
            dialog.ShowModal()
            dbPath = dialog.getCaseDb()
        
            global caseDetails
            try:
                  conn = connectdb.create_connection(dbPath)                      #connects to new case database
                  caseDetails = connectdb.select_case_details(conn)               #get InvestigatorName, CaseNum, CaseName, CaseFolder, CaseDb, CaseDesc, Datatime from case database
                  self.recreateTree(dbPath)                                       #creates treectrl
            except:
                  pass 
        
            dialog.Destroy()

      def on_menu_Open_Case(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            openFileDialog = wx.FileDialog(self, "Open", "", "","*.db",         #creates a filedialog that only allow user to select .db files
                                       wx.FD_OPEN | wx.FD_FILE_MUST_EXIST) 
 
            openFileDialog.ShowModal()                      
            global caseDbPath
            caseDbPath  = openFileDialog.GetPath()                              #get path selected in filedialog
              
            global caseDetails, evidenceDetails
            try:
                  conn = connectdb.create_connection(caseDbPath)                  #try to connect to case database and get case and evidence details
                  caseDetails = connectdb.select_case_details(conn)
                  evidenceDetails = connectdb.select_evidence_details(conn)       #get EvidenceName, EvidenceDbPath, EvidenceDatatime and Md5 from case database
                  self.addAuiTab("Summary", evidenceDetails)                      #opens summary page 
                  openTabs.append("Summary")                          
                  self.recreateTree(caseDbPath)
            except:
                  pass                                                            #ignore if try: fails
            openFileDialog.Destroy()

      def on_menu_Add_PCAP(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            openFileDialog = wx.FileDialog(self, "Open", "", "","*.pcap",         #creates a filedialog that only allow user to select .db files
                                       wx.FD_OPEN | wx.FD_FILE_MUST_EXIST) 
 
            openFileDialog.ShowModal()                      
            global caseDbPath
            caseDbPath  = openFileDialog.GetPath()

            """try:
                  process = Popen(['sudo', 'tshark', '-r', openFileDialog], stdout=PIPE, stderr=PIPE)
                  stdout, stderr = process.communicate()
                  self.tsharktab.SetValue(stdout)

                  process = Popen(['sudo', 'tcpdump', '-qns', '0', '-x', '-r', openFileDialog], stdout=PIPE, stderr=PIPE)
                  stdout, stderr = process.communicate()
                  self.packetsList.SetValue(stdout)                             #get path selected in filedialog
            except:
                  print("Could not be opened")  """                                                          #ignore if try: fails
            openFileDialog.Destroy()






      def on_menu_File_Exit(self, event):  
            self.Close()
            self.Destroy()

      def on_tools_clear(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            print("Event handler 'on_tools_clear' not implemented!")
            event.Skip()

      def on_tools_del(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            print("Event handler 'on_tools_del' not implemented!")
            event.Skip()

      def packet_file_notebook(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            print("Event handler 'packet_file_notebook' not implemented!")
            event.Skip()

      def packet_images_notebook(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            sel = self.list_ctrl.GetFocusedItem()                   #get selected item
            fileName = self.list_ctrl.GetItemText(sel, 0)           #get filename of selected item from col 0
            fileParentPath = self.list_ctrl.GetItemText(sel, 9)     #get parent path of selected item from col 9
            filePath = fileParentPath + fileName


            if self.notebookTab == " " or self.notebookTab == "Hex":
                  for x in evidenceInfo:                                                                                                              #loop through the directories in /Extracted/
                        if Path(caseDirectory+"/Extracted/"+x[1]+filePath).is_file():                                                                   #if file exist 
                              temp = subprocess.Popen(["xxd", caseDirectory+"/Extracted/"+x[1]+filePath], stdout=subprocess.PIPE).communicate()[0]        #get hexdump
                              self.text_ctrl_hex.SetValue(temp) 

            elif self.notebookTab == "File metadata":
                  for x in evidenceInfo:
                        if Path(caseDirectory+"/Extracted/"+x[1]+filePath).is_file():
                              temp = subprocess.Popen(["exiftool", caseDirectory+"/Extracted/"+x[1]+filePath], stdout=subprocess.PIPE).communicate()[0]   #get exif data of selected file
                              self.text_ctrl_FileMetadata.SetValue(temp)                                  

            elif self.notebookTab == "Image":
                  for x in evidenceInfo:
                        if Path(caseDirectory+"/Extracted/"+x[1]+filePath).is_file():
                              if fileName.lower().endswith(('.png', '.jpg', '.jpeg', '.exif', '.tiff', '.gif', '.bmp', '.bpg')):                          #display image using bitmap if file extension matches
                                    self.bitmap.SetBitmap(wx.Bitmap(caseDirectory+"/Extracted/"+x[1]+filePath, wx.BITMAP_TYPE_ANY))                         
                        


      def packet_sessions_notebook(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            print("Event handler 'packet_sessions_notebook' not implemented!")
            event.Skip()

      def packet_dns_notebook(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            print("Event handler 'packet_dns_notebook' not implemented!")
            event.Skip()

      def packet_credentials_notebook(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            print("Event handler 'packet_credentials_notebook' not implemented!")
            event.Skip()

      def packet_keywords_notebook(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            print("Event handler 'packet_keywords_notebook' not implemented!")
            event.Skip()

# end of class mainNetAnalysis

class MyApp(wx.App):
      def OnInit(self):
            self.mainNetAnalysis = mainNetAnalysis(None, wx.ID_ANY, "")
            self.SetTopWindow(self.mainNetAnalysis)
            self.mainNetAnalysis.Show()
            return True

# end of class MyApp

if __name__ == "__main__":
      app = MyApp(0)
      app.MainLoop()
